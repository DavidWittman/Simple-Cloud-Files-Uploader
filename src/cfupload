#!/usr/bin/env python
# Simple Cloud Files Uploader
# Uploads a file or files to Rackspace Cloud Files
# Author: David Wittman <david@wittman.com>

import argparse
import os
import os.path
import ssl
import sys
from contextlib import contextmanager
from Queue import Queue
from threading import Thread, current_thread

import cloudfiles

def main():
    "Main execution thread"

    files = Queue()
    
    args = get_args()

    # if sys.stdin.isatty = false, there is content in stdin
    if len(args.files) is 0 and not sys.stdin.isatty():
        if not args.destination:
            die("Destination filename must be provided with -o")
        files.put(sys.stdin)
    elif len(args.files) > 0:
        if len(args.files) > 1 and args.destination:
            die("Destination filename can only be provided for individual "
                + "uploads")
        for _file in args.files:
            files.put(_file)
    else:
        die(usage)

    if not args.apikey or not args.user or not args.container:
        die("Missing Cloud Files account information. Seek help.")

    # Don't use more threads than there are files to upload
    if args.threads > files.qsize:
        args.threads = files.qsize

    # Begin upload
    for _ in xrange(args.threads):
        t = Thread(target=worker, args=(files, args,))
        t.daemon = True
        t.start()

    # Block until the queues are empty
    files.join()

def retry_on(exception):
    def decorator(fn):
        def wrapper(*args, **kwargs):
            while True:
                try:
                    fn(*args, **kwargs)
                except exception:
                    sys.stderr.write('[ERROR] Connection timeout. Retrying.')
                    continue
                break
        return wrapper
    return decorator

@retry_on(ssl.SSLError)
def worker(files, args):
    with get_cloudfiles_container(args) as container:
        while True:
            _file = files.get()
            # Disable CDN URL printing if the container is not public
            if args.cdn_true and not container.is_public():
                sys.stderr.write('[WARN] This container is not public.'
                                 + 'Disabling CDN URL output.\n')
                args.cdn_true = False

            if os.path.isfile(_file):
                upload_to_cloudfiles(container, _file, args)
            else:
                sys.stderr.write('[WARN] %s does not exist. Skipping.'
                                 % _file)

            # Tell the Queue that this task has been processed
            files.task_done()

def usage():
    sys.stderr.write("usage: %s [options] <filename>\n" % sys.argv[0])

def get_env(value):
    "Gets an environment variable"
    return os.environ.get(value, '')

def die(error):
    try:
        error()
    except TypeError:
        sys.stderr.write("Error: " + error + "\n")
    sys.exit(1)

def get_args():
    desc = "Upload files to Rackspace Cloud Files or Openstack Swift."

    parser = argparse.ArgumentParser(description=desc)

    conngroup = parser.add_argument_group("Cloud Files Connection Information")
    
    conngroup.add_argument(
        "-k", "--apikey", 
        dest = "apikey", 
        metavar = "<api key>", 
        help = "API key. Defaults to env[CLOUD_FILES_APIKEY]",
        default = get_env('CLOUD_FILES_APIKEY') )

    conngroup.add_argument(
        "-u", "--user", 
        dest = "user", 
        metavar = "<username>", 
        help = "Username. Defaults to env[CLOUD_FILES_USERNAME]",
        default = get_env('CLOUD_FILES_USERNAME') )
        
    conngroup.add_argument(
        "-a", "--auth", 
        dest = "auth_url", 
        metavar = "<auth_url>", 
        help = "Authentication endpoint. Defaults to env[CLOUD_FILES_AUTH_URL]",
        default = get_env('CLOUD_FILES_AUTH_URL') )

    conngroup.add_argument(
        "-s", "--snet",
        action = "store_true",
        dest = "servicenet",
        help = "Use ServiceNet for connections",
        default = False )

    conngroup.add_argument(
        "-P", "--parallel",
        dest = "threads",
        type = int,
        help = "Number of threads to use",
        default = 5 )

    outputgroup = parser.add_argument_group("Output options")
    
    outputgroup.add_argument(
        "-o", "--file", 
        dest = "destination", 
        metavar = "<filename>", 
        help = "Destination filename in Cloud Files or Openstack Swift")

    outputgroup.add_argument(
        "-q", 
        action = "store_true", 
        dest = "quiet", 
        help = "Silence output", 
        default = False)
        
    outputgroup.add_argument(
        "-c", "--cdn",
        action = "store_true", 
        dest = "cdn_true", 
        help = "Print CDN URL to stdout", 
        default = False)        

    parser.add_argument(
        "container",
        help = "Container name in Cloud Files or Openstack Swift")

    parser.add_argument(
        "files",
        help = "The file(s) to upload",
        # Accept all of the remaining arguments as filenames
        nargs = '*')

    return parser.parse_args()

@contextmanager
def get_cloudfiles_container(args):
    auth_url = args.auth_url or 'https://identity.api.rackspacecloud.com/v1.0'

    while True:
        try:
            connection = cloudfiles.get_connection(args.user,
                                                   args.apikey,
                                                   servicenet=args.servicenet,
                                                   authurl=auth_url,
                                                   timeout=15)
            yield connection.get_container(args.container)
        except cloudfiles.errors.NoSuchContainer:
            sys.stderr.write("[WARN] The container %s does not exist. "
                             % args.container)
            sys.stderr.write("Creating it now.\n")
            connection.create_container(args.container)
            continue
        except cloudfiles.errors.AuthenticationFailed:
            die("Authentication failed to %s" % auth_url)
        except Exception as e:
            die("Unknown error establishing connection to %s" % auth_url)
        else:
            del connection

        break

def upload_to_cloudfiles(container, filename, args):
    """
    Upload an object to Cloud Files or Openstack Swift.
    
    Args:
        container: A cloudfiles container object
        filename: A stream or path to the object to upload.
        args: Arguments Namespace returned by ArgumentParser

    """
    
    destination = args.destination and args.destination \
                                   or  os.path.basename(filename)
    cloudpath = container.create_object(destination)

    # If it's iterable, use CF_storage_object's send method
    if hasattr(filename, "read"):
        cloudpath.send(filename)
    # Upload file to Cloud Files using load_from_filename()
    elif (os.path.exists(filename)):
        cloudpath.load_from_filename(filename)
    else:
        die("File not found")

    if not args.quiet:
        print("File %s uploaded successfully." % destination)
        if args.cdn_true:
            print("CDN URL: %s/%s" % (container.public_uri(), destination))

if __name__ == '__main__':
    main()

# vim: set expandtab ts=4 sw=4 sts=4:
